schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Playground @aws_cognito_user_pools {
  code: String!
  lang: String!
  sessionID: ID!
  stdin: String!
  userID: ID!
}

type User @aws_cognito_user_pools @aws_api_key {
  userID: ID
  detail: UserDetail
}

type UserDetail @aws_cognito_user_pools @aws_api_key {
  userID: ID!
  screenName: String!
  icon: Boolean!
  problem(id: ID, slug: String): ProblemDetail
  problems(nextToken: String): ProblemConnection!
  contests(nextToken: String): ContestConnection!
  contest(id: ID, slug: String): Contest
}

type ReplyConnection @aws_cognito_user_pools @aws_api_key {
  items: [Reply]!
  nextToken: String
}

type Reply @aws_cognito_user_pools @aws_api_key {
  replyID: ID!
  datetime: AWSDateTime!
  user: User!
  content: String!
}

type CommentConnection @aws_cognito_user_pools @aws_api_key {
  items: [Comment]!
  nextToken: String
}

type Comment @aws_cognito_user_pools @aws_api_key {
  commentID: ID!
  datetime: AWSDateTime!
  user: User!
  content: String!
  replyCount: Int!
  replies: ReplyConnection!
}

type LikerConnection {
  items: [User]!
  nextToken: String
}

type Testcase {
  problemID: ID
  name: String
  inUrl: AWSURL
  outUrl: AWSURL
}

enum ProblemStatus {
  CREATED
  CREATED_NOT_LISTED
  DELETED
}

type ProblemConnection @aws_cognito_user_pools @aws_api_key {
	items: [ProblemDetail]
	nextToken: String
}

type Problem @aws_cognito_user_pools @aws_api_key {
  problemID: ID!
  detail: ProblemDetail
}

type ProblemDetail @aws_cognito_user_pools @aws_api_key {
  id: ID!
  slug: String!
  user: User!
  datetime: AWSDateTime!
  status: ProblemStatus!
  title: String
  likedByMe: Boolean! @aws_cognito_user_pools
  likeCount: Int!
  likers: LikerConnection!
  commentCount: Int!
  comments: CommentConnection!
  statement: String
  hasEditorial: Boolean
  editorial: String
  hasDifficulty: Boolean
  difficulty: String
  testcase(name: String!): Testcase
  testcaseNames: [String]!
  submission(id: ID!): Submission
  submissions(nextToken: String, userID: ID): SubmissionConnection!
}

type SubmissionConnection @aws_cognito_user_pools @aws_api_key {
  items: [Submission]
  nextToken: String
}

enum TestcaseResultStatus {
  WJ
  AC
  WA
  TLE
  MLE
  RE
}

type TestcaseResult @aws_api_key @aws_cognito_user_pools @aws_iam {
  name: String!
  status: TestcaseResultStatus!
  time: Int!
  memory: Int!
}

enum SubmissionStatus {
  WJ
  CE
  JUDGED
  IE
}

type Submission @aws_cognito_user_pools @aws_api_key {
  id: ID!
  problemID: ID!
  contestID: ID
  user: User!
  datetime: AWSDateTime!
  lang: String!
  status: SubmissionStatus!
  code: String!
  stderr: String!
  testcases: [TestcaseResult]!
}

type UpdateSubmissionOutput @aws_iam @aws_api_key {
  id: ID!
  userID: ID!
  status: SubmissionStatus!
  stderr: String
  testcases: [TestcaseResult]
}

type ContestProblem @aws_cognito_user_pools {
  problem: Problem!
  point: Int!
}

type ContestSubmission @aws_cognito_user_pools @aws_api_key {
  penalty: Int!
  score: Int
  secondsFromStart: Int
}

type Standing @aws_cognito_user_pools @aws_api_key {
  rank: Int!
  user: User!
  score: Int!
  penalty: Int!
  secondsFromStart: Int!
  submissions: [ContestSubmission]!
}

enum ContestStatus {
  PUBLIC
  UNLISTED
}

type ContestDetail @aws_cognito_user_pools {
  contestID: ID
  joined: Boolean!
  problems: [ContestProblem]
  problem(index: Int!): ContestProblem
  submissions: SubmissionConnection
  submission(id: ID!): Submission
}

type Contest @aws_cognito_user_pools @aws_api_key {
  id: ID!
  user: User!
  status: ContestStatus!
  slug: String!
  name: String!
  description: String!
  datetime: AWSDateTime!
  startDatetime: AWSDateTime!
  duration: Int!
  penaltySeconds: Int!
  numberOfTasks: Int!
  standings: [Standing]!
  detail: ContestDetail! @aws_cognito_user_pools
}

type ContestConnection @aws_cognito_user_pools @aws_api_key {
	items: [Contest]
	nextToken: String
}

type Mutation {
  responsePlayground(input: ResponsePlaygroundInput!): ResponsePlayground! @aws_iam
  runPlayground(input: RunPlaygroundInput!): Playground @aws_api_key @aws_cognito_user_pools
  submitCode(input: SubmitCodeInput!): Submission! @aws_api_key @aws_cognito_user_pools
  updateSubmission(input: UpdateSubmissionInput!): UpdateSubmissionOutput! @aws_iam
  likeProblem(input: LikeProblemInput!): Boolean! @aws_cognito_user_pools
  postComment(input: PostCommentInput!): Comment! @aws_cognito_user_pools
  postReply(input: PostReplyInput!): Reply! @aws_cognito_user_pools
  issueProblemUploadUrl(input: IssueProblemUploadUrlInput!): String! @aws_cognito_user_pools
  issueProblemDownloadUrl(input: IssueProblemDownloadUrlInput!): String! @aws_cognito_user_pools
  deleteProblem(input: DeleteProblemInput!): ID @aws_cognito_user_pools
  setUserIcon(input: SetUserIconInput): String @aws_cognito_user_pools
  renameScreenName(screenName: String!): String! @aws_cognito_user_pools
  createContest(input: CreateContestInput!): Contest! @aws_cognito_user_pools
  updateContest(input: UpdateContestInput!): Contest! @aws_cognito_user_pools
  deleteContest(input: DeleteContestInput!): ID @aws_cognito_user_pools
  joinContest(input: JoinContestInput!): Boolean! @aws_cognito_user_pools
}

type ResponsePlayground @aws_cognito_user_pools @aws_iam {
  exitCode: Int!
  memory: Int!
  sessionID: ID!
  stderr: String!
  stdout: String!
  time: Int!
  userID: ID! 
}

type Query @aws_cognito_user_pools @aws_api_key {
  user(userID: ID, username: String): UserDetail
  newProblems: [ProblemDetail]!
  newContests: [Contest]!
}

type Subscription @aws_cognito_user_pools {
  onResponsePlayground(sessionID: ID!, userID: ID): ResponsePlayground  @aws_subscribe(mutations : ["responsePlayground"])
}

input ResponsePlaygroundInput {
  exitCode: Int!
  memory: Int!
  sessionID: ID!
  stderr: String!
  stdout: String!
  time: Int!
  userID: ID!
}

input RunPlaygroundInput {
  code: String!
  lang: String!
  sessionID: ID!
  stdin: String!
}

input SubmitCodeInput {
  problemID: ID!
  contestID: ID
  lang: String!
  code: String!
}

input TestcaseResultInput @aws_cognito_user_pools @aws_api_key {
  name: String!
  status: TestcaseResultStatus!
  time: Int!
  memory: Int!  
}

input UpdateSubmissionInput {
  id: ID!
  userID: ID! @aws_iam @aws_api_key
  status: SubmissionStatus!
  stderr: String
  testcases: [TestcaseResultInput]
}

input LikeProblemInput @aws_cognito_user_pools {
  problemID: ID!
  like: Boolean! 
}

input PostCommentInput @aws_cognito_user_pools {
  problemID: ID
  content: String! 
}

input PostReplyInput @aws_cognito_user_pools {
  commentID: ID
  content: String! 
}

input IssueProblemUploadUrlInput @aws_cognito_user_pools {
  problemName: String!
}

input IssueProblemDownloadUrlInput @aws_cognito_user_pools {
  problemName: String!
}

input DeleteProblemInput @aws_cognito_user_pools {
  slug: String!
}

input SetUserIconInput @aws_cognito_user_pools {
  icon: String!
}

input ContestProblemInput @aws_cognito_user_pools {
  problemID: ID!
  point: Int!
}

input CreateContestInput @aws_cognito_user_pools {
  slug: String!
  name: String!
  status: ContestStatus!
  description: String!
  startDatetime: AWSDateTime!
  duration: Int!
  penaltySeconds: Int!
  problems: [ContestProblemInput]!
}

input UpdateContestInput @aws_cognito_user_pools {
  slug: String!
  name: String!
  status: ContestStatus!
  description: String!
  startDatetime: AWSDateTime!
  duration: Int!
  penaltySeconds: Int!
  problems: [ContestProblemInput]!
}

input DeleteContestInput @aws_cognito_user_pools {
  slug: String!
}

input JoinContestInput @aws_cognito_user_pools {
  contestID: ID!
  join: Boolean!
}
